#version 460

layout(std430, binding = 0) buffer PoissonBuffer {
    vec2 PoissonPoints[];
};

layout(binding = 1, r8ui) readonly uniform uimage2D ditheredTexture;
layout(binding = 2, r8ui) writeonly uniform uimage2D outputImage;

uniform float threshold;
uniform int textureSize;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;
    vec2 point = PoissonPoints[index];

    int areaSize = 2;
    vec2 texCoord = point * vec2(textureSize);

    float sum = 0;

    for (int i = -areaSize; i <= areaSize; ++i) {
        for (int j = -areaSize; j <= areaSize; ++j) {
            vec2 offset = vec2(i, j);
            vec4 pixelValue = imageLoad(ditheredTexture, ivec2(texCoord) + ivec2(offset));
            sum += pixelValue.r;
        }
    }

    // pixelValue.r is either 0.0f or 1.0f, because of dithering
    uint out_value = uint(step(threshold, sum));

    imageStore(outputImage, ivec2(texCoord), uvec4(out_value, 0, 0, 0));
}
